[
    {
        "label": "Dash",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "callback",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "dcc",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "plotly.express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.express",
        "description": "plotly.express",
        "detail": "plotly.express",
        "documentation": {}
    },
    {
        "label": "dash_bootstrap_components",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash_bootstrap_components",
        "description": "dash_bootstrap_components",
        "detail": "dash_bootstrap_components",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "predictio",
        "kind": 2,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "def prediction (max_power, mileage, km_driven, submit):\n    if max_power == None:\n        max_power = df[\"max_power\"].median()\n    if mileage == None:\n        mileage = df[\"mileage\"].mean()\n    if km_driven == None:\n        km_driven = df[\"km_driven\"].median()\n    model = pickle.load(open(\"/root/code/car_prediction.model\", 'rb'))\n    sample = np.array([[max_power, mileage, math.log(km_driven)]])\n    result = np.exp(model.predict(sample))",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df = pd.read_csv(\"/root/code/Cars.csv\")\ndf[\"brand\"] = df[\"name\"].str.split(\" \").str[0]\ndf.drop([\"name\"], axis=1, inplace=True)\ndf[[\"mileage_value\",\"mileage_unit\"]] = df[\"mileage\"].str.split(pat=' ', expand = True)\ndf[[\"engine_value\",\"engine_unit\"]] = df[\"engine\"].str.split(pat=' ', expand = True)\ndf[[\"max_power_value\",\"max_power_unit\"]] = df[\"max_power\"].str.split(pat=' ', expand = True)\ndf.drop([\"mileage\",\"engine\",\"max_power\"], axis=1, inplace=True)\ndf = df.loc[(df[\"fuel\"] != 'LPG') & (df[\"fuel\"] != 'CNG')]\ndf[[\"mileage\",\"engine\",\"max_power\"]] = df[[\"mileage_value\",\"engine_value\",\"max_power_value\"]].astype('float64')\ndf.drop([\"mileage_value\",\"engine_value\",\"max_power_value\",",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df[\"brand\"]",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df[\"brand\"] = df[\"name\"].str.split(\" \").str[0]\ndf.drop([\"name\"], axis=1, inplace=True)\ndf[[\"mileage_value\",\"mileage_unit\"]] = df[\"mileage\"].str.split(pat=' ', expand = True)\ndf[[\"engine_value\",\"engine_unit\"]] = df[\"engine\"].str.split(pat=' ', expand = True)\ndf[[\"max_power_value\",\"max_power_unit\"]] = df[\"max_power\"].str.split(pat=' ', expand = True)\ndf.drop([\"mileage\",\"engine\",\"max_power\"], axis=1, inplace=True)\ndf = df.loc[(df[\"fuel\"] != 'LPG') & (df[\"fuel\"] != 'CNG')]\ndf[[\"mileage\",\"engine\",\"max_power\"]] = df[[\"mileage_value\",\"engine_value\",\"max_power_value\"]].astype('float64')\ndf.drop([\"mileage_value\",\"engine_value\",\"max_power_value\",\n        \"mileage_unit\",\"engine_unit\",\"max_power_unit\"], axis=1, inplace = True)",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df[[\"mileage_value\",\"mileage_unit\"]]",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df[[\"mileage_value\",\"mileage_unit\"]] = df[\"mileage\"].str.split(pat=' ', expand = True)\ndf[[\"engine_value\",\"engine_unit\"]] = df[\"engine\"].str.split(pat=' ', expand = True)\ndf[[\"max_power_value\",\"max_power_unit\"]] = df[\"max_power\"].str.split(pat=' ', expand = True)\ndf.drop([\"mileage\",\"engine\",\"max_power\"], axis=1, inplace=True)\ndf = df.loc[(df[\"fuel\"] != 'LPG') & (df[\"fuel\"] != 'CNG')]\ndf[[\"mileage\",\"engine\",\"max_power\"]] = df[[\"mileage_value\",\"engine_value\",\"max_power_value\"]].astype('float64')\ndf.drop([\"mileage_value\",\"engine_value\",\"max_power_value\",\n        \"mileage_unit\",\"engine_unit\",\"max_power_unit\"], axis=1, inplace = True)\ndict_owner = {'First Owner':1, 'Second Owner':2, 'Third Owner':3, 'Fourth & Above Owner':4,\n            'Test Drive Car':5}",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df[[\"engine_value\",\"engine_unit\"]]",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df[[\"engine_value\",\"engine_unit\"]] = df[\"engine\"].str.split(pat=' ', expand = True)\ndf[[\"max_power_value\",\"max_power_unit\"]] = df[\"max_power\"].str.split(pat=' ', expand = True)\ndf.drop([\"mileage\",\"engine\",\"max_power\"], axis=1, inplace=True)\ndf = df.loc[(df[\"fuel\"] != 'LPG') & (df[\"fuel\"] != 'CNG')]\ndf[[\"mileage\",\"engine\",\"max_power\"]] = df[[\"mileage_value\",\"engine_value\",\"max_power_value\"]].astype('float64')\ndf.drop([\"mileage_value\",\"engine_value\",\"max_power_value\",\n        \"mileage_unit\",\"engine_unit\",\"max_power_unit\"], axis=1, inplace = True)\ndict_owner = {'First Owner':1, 'Second Owner':2, 'Third Owner':3, 'Fourth & Above Owner':4,\n            'Test Drive Car':5}\ndf[\"owner\"] = df[\"owner\"].map(dict_owner)",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df[[\"max_power_value\",\"max_power_unit\"]]",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df[[\"max_power_value\",\"max_power_unit\"]] = df[\"max_power\"].str.split(pat=' ', expand = True)\ndf.drop([\"mileage\",\"engine\",\"max_power\"], axis=1, inplace=True)\ndf = df.loc[(df[\"fuel\"] != 'LPG') & (df[\"fuel\"] != 'CNG')]\ndf[[\"mileage\",\"engine\",\"max_power\"]] = df[[\"mileage_value\",\"engine_value\",\"max_power_value\"]].astype('float64')\ndf.drop([\"mileage_value\",\"engine_value\",\"max_power_value\",\n        \"mileage_unit\",\"engine_unit\",\"max_power_unit\"], axis=1, inplace = True)\ndict_owner = {'First Owner':1, 'Second Owner':2, 'Third Owner':3, 'Fourth & Above Owner':4,\n            'Test Drive Car':5}\ndf[\"owner\"] = df[\"owner\"].map(dict_owner)\ndf = df[df[\"owner\"] != 5]",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df = df.loc[(df[\"fuel\"] != 'LPG') & (df[\"fuel\"] != 'CNG')]\ndf[[\"mileage\",\"engine\",\"max_power\"]] = df[[\"mileage_value\",\"engine_value\",\"max_power_value\"]].astype('float64')\ndf.drop([\"mileage_value\",\"engine_value\",\"max_power_value\",\n        \"mileage_unit\",\"engine_unit\",\"max_power_unit\"], axis=1, inplace = True)\ndict_owner = {'First Owner':1, 'Second Owner':2, 'Third Owner':3, 'Fourth & Above Owner':4,\n            'Test Drive Car':5}\ndf[\"owner\"] = df[\"owner\"].map(dict_owner)\ndf = df[df[\"owner\"] != 5]\n# Initialize the app - incorporate a Dash Bootstrap theme\nexternal_stylesheets = [dbc.themes.JOURNAL]",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df[[\"mileage\",\"engine\",\"max_power\"]]",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df[[\"mileage\",\"engine\",\"max_power\"]] = df[[\"mileage_value\",\"engine_value\",\"max_power_value\"]].astype('float64')\ndf.drop([\"mileage_value\",\"engine_value\",\"max_power_value\",\n        \"mileage_unit\",\"engine_unit\",\"max_power_unit\"], axis=1, inplace = True)\ndict_owner = {'First Owner':1, 'Second Owner':2, 'Third Owner':3, 'Fourth & Above Owner':4,\n            'Test Drive Car':5}\ndf[\"owner\"] = df[\"owner\"].map(dict_owner)\ndf = df[df[\"owner\"] != 5]\n# Initialize the app - incorporate a Dash Bootstrap theme\nexternal_stylesheets = [dbc.themes.JOURNAL]\napp = Dash(__name__, external_stylesheets=external_stylesheets)",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "dict_owner",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "dict_owner = {'First Owner':1, 'Second Owner':2, 'Third Owner':3, 'Fourth & Above Owner':4,\n            'Test Drive Car':5}\ndf[\"owner\"] = df[\"owner\"].map(dict_owner)\ndf = df[df[\"owner\"] != 5]\n# Initialize the app - incorporate a Dash Bootstrap theme\nexternal_stylesheets = [dbc.themes.JOURNAL]\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n# Create app layout\napp.layout = html.Div([\n        html.H1(\"Selling car price prediction\"),",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df[\"owner\"]",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df[\"owner\"] = df[\"owner\"].map(dict_owner)\ndf = df[df[\"owner\"] != 5]\n# Initialize the app - incorporate a Dash Bootstrap theme\nexternal_stylesheets = [dbc.themes.JOURNAL]\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n# Create app layout\napp.layout = html.Div([\n        html.H1(\"Selling car price prediction\"),\n        html.Br(),\n        html.H3(\"Welcome to car prediction website.\"),",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "df = df[df[\"owner\"] != 5]\n# Initialize the app - incorporate a Dash Bootstrap theme\nexternal_stylesheets = [dbc.themes.JOURNAL]\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n# Create app layout\napp.layout = html.Div([\n        html.H1(\"Selling car price prediction\"),\n        html.Br(),\n        html.H3(\"Welcome to car prediction website.\"),\n        html.Br(),",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "external_stylesheets",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "external_stylesheets = [dbc.themes.JOURNAL]\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n# Create app layout\napp.layout = html.Div([\n        html.H1(\"Selling car price prediction\"),\n        html.Br(),\n        html.H3(\"Welcome to car prediction website.\"),\n        html.Br(),\n        html.H6(\"This is where you can estimate car price by putting numbers in parameters. Car price prediction depends on three features, including to\"),\n        html.H6(\"maximum power, mileage and kilometers driven. Firstly, you have to fill at least one input boxes, and then click submit to get result.\"),",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "app = Dash(__name__, external_stylesheets=external_stylesheets)\n# Create app layout\napp.layout = html.Div([\n        html.H1(\"Selling car price prediction\"),\n        html.Br(),\n        html.H3(\"Welcome to car prediction website.\"),\n        html.Br(),\n        html.H6(\"This is where you can estimate car price by putting numbers in parameters. Car price prediction depends on three features, including to\"),\n        html.H6(\"maximum power, mileage and kilometers driven. Firstly, you have to fill at least one input boxes, and then click submit to get result.\"),\n        html.H6(\"bellow the submit button. Please make sure that filled number are not negative.\"),",
        "detail": "source_code.main",
        "documentation": {}
    },
    {
        "label": "app.layout",
        "kind": 5,
        "importPath": "source_code.main",
        "description": "source_code.main",
        "peekOfCode": "app.layout = html.Div([\n        html.H1(\"Selling car price prediction\"),\n        html.Br(),\n        html.H3(\"Welcome to car prediction website.\"),\n        html.Br(),\n        html.H6(\"This is where you can estimate car price by putting numbers in parameters. Car price prediction depends on three features, including to\"),\n        html.H6(\"maximum power, mileage and kilometers driven. Firstly, you have to fill at least one input boxes, and then click submit to get result.\"),\n        html.H6(\"bellow the submit button. Please make sure that filled number are not negative.\"),\n        html.Br(),\n        html.H4(\"Definition\"),",
        "detail": "source_code.main",
        "documentation": {}
    }
]